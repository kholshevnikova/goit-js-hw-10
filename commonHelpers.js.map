{"version":3,"file":"commonHelpers.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from 'flatpickr';\nimport 'flatpickr/dist/flatpickr.min.css';\nimport iziToast from 'izitoast';\nimport 'izitoast/dist/css/iziToast.min.css';\n\nlet userSelectedDate = null;\nlet intervalId = null;\nlet isActive = false;\n\nconst refs = {\n  input: document.querySelector('#datetime-picker'),\n  startBtn: document.querySelector('[data-start]'),\n  daysOnClockFace: document.querySelector('[data-days'),\n  hoursOnClockFace: document.querySelector('[data-hours'),\n  minutesOnClockFace: document.querySelector('[data-minutes]'),\n  secondsOnClockFace: document.querySelector('[data-seconds]'),\n};\nrefs.startBtn.disabled = true;\n\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    console.log(selectedDates[0]);\n    if (selectedDates[0] < Date.now()) {\n      iziToast.error({\n        // title: 'Error',\n        message: 'Please choose a date in the future',\n        position: 'topCenter',\n      });\n      // window.alert('Please choose a date in the future');\n      // selectedDates[0] = new Date();\n      refs.startBtn.disabled = true;\n    } else {\n      refs.startBtn.disabled = false;\n      userSelectedDate = selectedDates[0];\n    }\n  },\n};\n\nflatpickr('#datetime-picker', options);\n\nfunction pad(value) {\n  return String(value).padStart(2, '0');\n}\n\n// Малюємо інтерфейс\n\nfunction updateClockFace({ days, hours, minutes, seconds }) {\n  refs.daysOnClockFace.textContent = `${days}`;\n  refs.hoursOnClockFace.textContent = `${hours}`;\n  refs.minutesOnClockFace.textContent = `${minutes}`;\n  refs.secondsOnClockFace.textContent = `${seconds}`;\n}\n\n// let isActive = false;\n// let counter = 0;\nconst timer = {\n  start() {\n    if (isActive) return;\n\n    isActive = true;\n    refs.input.disabled = true;\n    refs.startBtn.disabled = true;\n    // const initialTime = Date.now();\n    // // console.log(initialtime);\n    intervalId = setInterval(() => {\n      const currentTime = Date.now();\n      // console.log(currentTime);\n      const deltaTime = userSelectedDate - currentTime;\n      console.log(deltaTime);\n\n      if (deltaTime < 0) {\n        clearInterval(intervalId);\n        isActive = false;\n        updateClockFace({\n          days: '00',\n          hours: '00',\n          minutes: '00',\n          seconds: '00',\n        });\n        refs.input.disabled = false;\n        return;\n      }\n      const time = convertMs(deltaTime);\n      console.log(time);\n      updateClockFace(time);\n      // refs.daysOnClockFace.innerHTML = `${time.days}`;\n      // refs.hoursOnClockFace.innerHTML = `${time.hours}`;\n      // refs.minutesOnClockFace.innerHTML = `${time.minutes}`;\n      // refs.secondsOnClockFace.innerHTML = `${time.seconds}`;\n    }, 1000);\n    // counter += 1;\n    // console.log(counter);\n  },\n};\n\n// timer.start();\nrefs.startBtn.addEventListener('click', () => {\n  timer.start();\n});\n\nfunction convertMs(ms) {\n  // Number of milliseconds per unit of time\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  // Remaining days\n  const days = pad(Math.floor(ms / day));\n  // Remaining hours\n  const hours = pad(Math.floor((ms % day) / hour));\n  // Remaining minutes\n  const minutes = pad(Math.floor(((ms % day) % hour) / minute));\n  // Remaining seconds\n  const seconds = pad(Math.floor((((ms % day) % hour) % minute) / second));\n\n  return { days, hours, minutes, seconds };\n}\n\nconsole.log(convertMs(2000)); // {days: 0, hours: 0, minutes: 0, seconds: 2}\nconsole.log(convertMs(140000)); // {days: 0, hours: 0, minutes: 2, seconds: 20}\nconsole.log(convertMs(24140000)); // {days: 0, hours: 6 minutes: 42, seconds: 20}\n"],"names":["userSelectedDate","intervalId","isActive","refs","options","selectedDates","iziToast","flatpickr","pad","value","updateClockFace","days","hours","minutes","seconds","timer","currentTime","deltaTime","time","convertMs","ms"],"mappings":"+IAKA,IAAIA,EAAmB,KACnBC,EAAa,KACbC,EAAW,GAEf,MAAMC,EAAO,CACX,MAAO,SAAS,cAAc,kBAAkB,EAChD,SAAU,SAAS,cAAc,cAAc,EAC/C,gBAAiB,SAAS,cAAc,YAAY,EACpD,iBAAkB,SAAS,cAAc,aAAa,EACtD,mBAAoB,SAAS,cAAc,gBAAgB,EAC3D,mBAAoB,SAAS,cAAc,gBAAgB,CAC7D,EACAA,EAAK,SAAS,SAAW,GAEzB,MAAMC,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACrB,QAAQ,IAAIA,EAAc,CAAC,CAAC,EACxBA,EAAc,CAAC,EAAI,KAAK,IAAG,GAC7BC,EAAS,MAAM,CAEb,QAAS,qCACT,SAAU,WAClB,CAAO,EAGDH,EAAK,SAAS,SAAW,KAEzBA,EAAK,SAAS,SAAW,GACzBH,EAAmBK,EAAc,CAAC,EAErC,CACH,EAEAE,EAAU,mBAAoBH,CAAO,EAErC,SAASI,EAAIC,EAAO,CAClB,OAAO,OAAOA,CAAK,EAAE,SAAS,EAAG,GAAG,CACtC,CAIA,SAASC,EAAgB,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,EAAI,CAC1DX,EAAK,gBAAgB,YAAc,GAAGQ,CAAI,GAC1CR,EAAK,iBAAiB,YAAc,GAAGS,CAAK,GAC5CT,EAAK,mBAAmB,YAAc,GAAGU,CAAO,GAChDV,EAAK,mBAAmB,YAAc,GAAGW,CAAO,EAClD,CAIA,MAAMC,EAAQ,CACZ,OAAQ,CACFb,IAEJA,EAAW,GACXC,EAAK,MAAM,SAAW,GACtBA,EAAK,SAAS,SAAW,GAGzBF,EAAa,YAAY,IAAM,CAC7B,MAAMe,EAAc,KAAK,MAEnBC,EAAYjB,EAAmBgB,EAGrC,GAFA,QAAQ,IAAIC,CAAS,EAEjBA,EAAY,EAAG,CACjB,cAAchB,CAAU,EACxBC,EAAW,GACXQ,EAAgB,CACd,KAAM,KACN,MAAO,KACP,QAAS,KACT,QAAS,IACnB,CAAS,EACDP,EAAK,MAAM,SAAW,GACtB,MACD,CACD,MAAMe,EAAOC,EAAUF,CAAS,EAChC,QAAQ,IAAIC,CAAI,EAChBR,EAAgBQ,CAAI,CAKrB,EAAE,GAAI,EAGR,CACH,EAGAf,EAAK,SAAS,iBAAiB,QAAS,IAAM,CAC5CY,EAAM,MAAK,CACb,CAAC,EAED,SAASI,EAAUC,EAAI,CAQrB,MAAMT,EAAOH,EAAI,KAAK,MAAMY,EAAK,KAAG,CAAC,EAE/BR,EAAQJ,EAAI,KAAK,MAAOY,EAAK,MAAO,IAAI,CAAC,EAEzCP,EAAUL,EAAI,KAAK,MAAQY,EAAK,MAAO,KAAQ,GAAM,CAAC,EAEtDN,EAAUN,EAAI,KAAK,MAASY,EAAK,MAAO,KAAQ,IAAU,GAAM,CAAC,EAEvE,MAAO,CAAE,KAAAT,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC,CAEA,QAAQ,IAAIK,EAAU,GAAI,CAAC,EAC3B,QAAQ,IAAIA,EAAU,IAAM,CAAC,EAC7B,QAAQ,IAAIA,EAAU,MAAQ,CAAC"}